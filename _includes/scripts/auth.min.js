async function loginUser(email){try{await magic.auth.loginWithMagicLink({email:email});const magicToken=await magic.user.getIdToken();console.log("Obtained magicToken:",magicToken),localStorage.setItem("magicToken",magicToken),localStorage.setItem("userId",data.user.id),console.log("magicToken stored in localStorage:",localStorage.getItem("magicToken")),window.location.href="/voyage"}catch(error){console.error("Login failed:",error),alert("Login failed: "+error.message)}}async function checkUser(){if(localStorage.getItem("magicToken")&&await magic.user.isLoggedIn())try{const userInfo=await magic.user.getInfo();return localStorage.setItem("userRole",userInfo.role||"Listener"),userInfo}catch(error){console.error("Error checking user info:",error)}window.location.href="/login"}async function logoutUser(){try{await magic.user.logout(),localStorage.removeItem("magicToken"),localStorage.removeItem("userId"),localStorage.removeItem("userRole"),localStorage.removeItem("userEmail"),localStorage.removeItem("userName"),window.location.href="/login"}catch(error){console.error("Logout failed:",error)}}"undefined"==typeof Magic?console.error("Magic SDK failed to load."):(console.log("Magic SDK loaded successfully."),window.magic=window.magic||new Magic("pk_live_C8C6E40CF7E226B5")),window.loginUser=loginUser,window.logoutUser=logoutUser,window.checkUser=checkUser;